@page
@model PasteModel
@{
    ViewData["Title"] = Model.Paste.Title.Length > 0 ? Model.Paste.Title : Model.Paste.ID;
    ViewData["IncludeHighlight"] = true;
    var IsLoggedIn = HttpContext.Request.RouteValues["LoggedIn"] != null && (bool) HttpContext.Request.RouteValues["LoggedIn"];

    string pasteTitle = Model.Paste.Title.Length > 0 ? Model.Paste.Title : Model.Paste.ID;
    if (pasteTitle.Length >= 48) {
        pasteTitle = pasteTitle.Substring(0, Math.Min(pasteTitle.Length, 48)) + "…";
    }
}

<div class="row justify-content-between my-2">
    <h6 class="m-0">By @(Model.Paste.Author != null ? Model.Paste.Author : "Guest")</h6>

    <div class="col-9 col-sm-8">
        @if (Model.Paste.Exposure == Paste.Exposures.Encrypted) {
            <i class="fas fa-lock d-inline"></i>
        }
        <h3 class="form-label fs-4 d-inline">@pasteTitle</h3>
        <div>
            <span id="paste-syntax" class="badge rounded-pill bg-light text-dark d-inline">@Model.Paste.Syntax</span>
            <span class="text-muted d-inline ms-2">
                <i class="fas fa-eye"></i> @Model.Paste.Views
            </span>
            <span class="text-muted d-inline ms-2">
                <i class="fas fa-clock"></i> @Paste.TimeAgo(Model.Paste.Date)
            </span>
        </div>
    </div>

    <div class="col-3 col-sm-4">
        <div class="row">
            <div class="col-6">

                <a href="/raw/@Model.Paste.ID" role="button" class="form-control btn btn-sm btn-outline-light"><i class="fas fa-code"></i> Raw Paste</a>
                @if (IsLoggedIn) {
                    <a href="/?edit=@Model.Paste.ID" role="button" type="submit" class="form-control btn btn-sm btn-outline-light mt-2"><i class="fas fa-edit"></i> Edit Paste</a>
                }
            </div>
            <div class="col-6">

                <a href="/?clone=@Model.Paste.ID" role="button" type="submit" class="form-control btn btn-sm btn-outline-light"><i class="fas fa-plus"></i> Clone Paste</a>
                @if (IsLoggedIn) {
                    <a href="/delete/@Model.Paste.ID" role="button" type="submit" class="form-control btn btn-sm btn-outline-danger disabled mt-2"><i class="fas fa-trash-alt"></i> Delete Paste</a>
                }
            </div>
        </div>
    </div>

</div>
<div id="paste-content" name="paste-input" class="my-2 form-control bg-dark text-light font-monospace codeblock outline-dark @(Model.Paste.Exposure == Paste.Exposures.Encrypted ? "locked" : "")">@(Model.Paste.Exposure == Paste.Exposures.Encrypted ? Html.Raw(Model.PasteContent) : Model.PasteContent)</div>

@if (Model.PasteContent.Split("\n").Length > 2048) {
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5">
        <div id="too-long-alert" class="toast show bg-dark" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-dark">
                <strong class="me-auto">Slow performance</strong>
            </div>
            <div class="toast-body">
                <p>Line numbers are not processed because it will impact the page performance.</p>
                <button type="button" class="btn btn-primary btn-sm" onclick="displayLinesAnyway(this);">Display anyway</button>
                <button type="button" class="btn btn-secondary btn-sm" onclick="closeAlert();">Ignore</button>
            </div>
        </div>
    </div>
}

@section Scripts {

    <script src="~/js/highlight.pack.js"></script>
    <script src="~/js/hlln.min.js"></script>

    <script>
        const code = document.getElementById("paste-content");

        addEventListener('load', () => {
            const syntax = document.getElementById("paste-syntax")

            let lines = code.innerText.match(/\n/g)?.length || 1;

            syntaxId = syntax.textContent;

            try {
                syntax.textContent = hljs.getLanguage(syntaxId).name;

                const worker = new Worker('/js/hl-worker.js');
                worker.onmessage = (event) => {
                    code.innerHTML = event.data;

                    if (lines <= 2048) {
                        displayLines();
                    }

                }
                worker.postMessage({
                    code: code.innerText,
                    language: syntaxId,
                    //element: code,
                });
            } catch (e) {
                console.error(e);
                syntax.textContent = syntaxId;
            }
        });

        function displayLines() {
            hljs.lineNumbersBlock(code);
        }

        function displayLinesAnyway(btn) {
            btn.disabled = true
            displayLines();
            closeAlert();
        }

        function closeAlert() {
            let alert = document.getElementById('too-long-alert');
            alert.classList.remove('show');
        }
    </script>

    @if (Model.Paste.Exposure == Paste.Exposures.Encrypted) {
        <div class="modal fade" id="unlock-modal" tabindex="-1" aria-labelledby="unlockLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content bg-dark">
                    <div class="modal-header">
                        <h5 class="modal-title" id="unlockLabel"><i class="fas fa-lock"></i> Encrypted Paste!</h5>
                        <button type="button" class="btn-close text-light" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>This paste is encrypted and requires a key to be readable.</p>
                    </div>
                    <div class="modal-footer">
                        <div class="row row-cols-lg-auto g-3">
                            <div class="col-8">
                                <label class="visually-hidden" for="paste-key">Key</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <i class="fas fa-key"></i>
                                    </div>
                                    <input id="paste-key" name="paste-key" type="password" autocomplete="off" class="form-control bg-dark text-light" placeholder="Paste key..."/>
                                </div>
                            </div>

                            <div class="col-4">
                                <label class="visually-hidden">Decrypt</label>
                                <button type="button" class="btn btn-primary" onclick="decryptPaste();"><i class="fas fa-unlock"></i> Decrypt</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js" integrity="sha512-nOQuvD9nKirvxDdvQ9OMqe2dgapbPB7vYAMrzJihw5m+aNcf0dX53m6YxM4LgA9u8e9eg9QX+/+mPu8kCNpV2A==" crossorigin="anonymous"></script>
        <script src="~/js/aes.js" type="text/javascript"></script>
        <script>
            let modal = new bootstrap.Modal(document.getElementById('unlock-modal'), {})

            function decryptPaste() {
                let pasteKey = document.getElementById("paste-key");

                let pasteContent = document.getElementById("paste-content");
                let res = decrypt(pasteContent.textContent, pasteKey.value);
                pasteContent.textContent = res;
                pasteContent.classList.remove("locked");
                pasteContent.classList.remove("text-muted");
                modal.hide();
            }

            modal.show();
        </script>
    }
}